{"version":3,"sources":["components/contactPicker/ContactPicker.js","components/appointmentForm/AppointmentForm.js","components/tile/ContactTile.jsx","components/tile/AppointmentTile.jsx","components/tileList/TileList.js","containers/appointmentsPage/AppointmentsPage.js","components/contactForm/ContactForm.js","containers/contactsPage/ContactsPage.js","App.js","index.js"],"names":["ContactPicker","setCurrentContact","contacts","name","onChange","e","target","value","map","each","i","AppointmentForm","currentTitle","appointments","title","setTitle","setCurrentTitle","contact","setContact","currentDate","date","setDate","setCurrentDate","currentTime","time","setTime","setCurrentTime","createAppointment","setAppointments","onSubmit","type","placeholder","ContactTile","props","className","phone","email","AppointmentTile","appointment","TileList","AppointmentsPage","currentContact","addAppointment","duplicateTitle","setDuplicateTitle","console","log","useState","useEffect","length","curreentTitle","appointmentObject","preventDefault","ContactForm","setCurrentName","currentName","setCurrentPhone","currentPhone","setCurrentEmail","currentEmail","handleSubmit","ContactsPage","setDuplicateName","currrentEmail","App","setContacts","dupliacateName","ROUTES","to","activeClassName","exact","path","contactObject","duplicateName","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5bb5f3d3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const ContactPicker = ({setCurrentContact, contacts}) => {\r\n\r\n    return (\r\n      <div>\r\n        <label ></label>\r\n          <select name=\"contacts\" onChange={(e) => {setCurrentContact(e.target.value)}}>\r\n            <option value=\"no contact selected\">no contact selected</option>\r\n            {contacts.map((each, i) => <option key={i} value={each.name}>{each.name}</option>)}\r\n          </select>\r\n      </div>\r\n    )\r\n};\r\n","import React from \"react\";\r\nimport { ContactPicker } from \"../contactPicker/ContactPicker\"\r\n\r\nconst AppointmentForm = ({\r\n  contacts,\r\n  appointments,\r\n  title,\r\n  setTitle,\r\n  currentTitle,\r\n  setCurrentTitle,\r\n  contact,\r\n  setContact,\r\n  setCurrentContact,\r\n  date,\r\n  setDate,\r\n  currentDate,\r\n  setCurrentDate,\r\n  time,\r\n  setTime,\r\n  currentTime,\r\n  setCurrentTime,\r\n  setAppointments,\r\n  createAppointment\r\n}) => {\r\n  \r\n  \r\n  // const getTodayString = () => {\r\n  //   const [month, day, year] = new Date()\r\n  //     .toLocaleDateString(\"en-US\")\r\n  //     .split(\"/\");\r\n  //   return `${year}-${month.padStart(2, \"0\")}-${day.padStart(2, \"0\")}`;\r\n  // };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={createAppointment}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"title\"\r\n          value={currentTitle}\r\n          onChange={(e) => {\r\n\r\n            setCurrentTitle(e.target.value)}\r\n          }\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"date\"\r\n          value={currentDate}\r\n          onChange={(e) => {setCurrentDate(e.target.value)}}\r\n          // min={getTodayString()}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"time\"\r\n          value={currentTime}\r\n          onChange={(e) => {setCurrentTime(e.target.value)}}\r\n        />\r\n        <ContactPicker contacts={contacts} setCurrentContact={setCurrentContact}/>\r\n        <input type=\"submit\"/>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppointmentForm\r\n","import React from \"react\";\n\nexport const ContactTile = (props) => {\n  if(props.contact) {\n\n    return (\n      <div>\n        <span><div className=\"tile-title\">{props.contact.name}</div></span>\n        <span><div className=\"tile\">{props.contact.phone}</div></span>\n        <span><div className=\"tile\">{props.contact.email}</div></span>\n      </div>\n    );\n  } else return 'no contacts'\n};\n\nexport default ContactTile;\n","import React from \"react\";\n\nexport const AppointmentTile = (props) => {\n  if(props.appointment) {\n    return (\n      <div>\n        <span><div className=\"tile-title\">{props.appointment.contact}</div></span>  \n        <span><div className=\"tile-title\">{props.appointment.title}</div></span>\n        <span><div className=\"tile\">{props.appointment.date}</div></span>\n        <span><div className=\"tile\">{props.appointment.time}</div></span>\n      </div>\n    )\n  } else return 'nothing returned'\n};\n\nexport default AppointmentTile;\n","import React from \"react\";\r\nimport ContactTile from '../tile/ContactTile';\r\nimport AppointmentTile from '../tile/AppointmentTile'\r\n\r\nconst TileList = (props) => {\r\n  \r\n  return(\r\n    <div>\r\n      {props.contacts ? props.contacts.map((each, i) => <ContactTile key={i} contact={each}/>) : \"\"}\r\n      {props.appointments ? props.appointments.map((each, i) => <AppointmentTile key={i} appointment={each}/>) : \"\"}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TileList","import React, {useState, useEffect} from \"react\";\r\nimport AppointmentForm from \"../../components/appointmentForm/AppointmentForm\";\r\nimport TileList from \"../../components/tileList/TileList\";\r\n\r\nexport const AppointmentsPage = ({\r\n  contacts,\r\n  currentContact,\r\n  setCurrentContact,\r\n  appointments,\r\n  setAppointments,\r\n  addAppointment,\r\n  setCurrentTitle,\r\n  title,\r\n  setTitle,\r\n  currentTitle,\r\n  date,\r\n  setDate,\r\n  currentDate,\r\n  setCurrentDate,\r\n  time,\r\n  setTime,\r\n  currentTime,\r\n  setCurrentTime,\r\n  duplicateTitle,\r\n  setDuplicateTitle\r\n}) => {\r\n  console.log('currentTitle in apptspage.js', currentTitle)\r\n  console.log('appointments in apptspage.js', appointments)\r\n  /*\r\n  Define state variables for \r\n  appointment info\r\n  */\r\n  const [contact, setContact] = useState(\"\")\r\n\r\n  useEffect(() => {\r\n    for (let i = 0; i < appointments.length; i++) {\r\n      console.log('appointments in useEffect', appointments)\r\n      if (appointments[i].title === currentTitle) {\r\n        setDuplicateTitle(true)\r\n      }else setDuplicateTitle(false)\r\n    }\r\n  }, [appointments, currentTitle, setDuplicateTitle])\r\n  \r\n  const createAppointment = (e) => {\r\n    if(duplicateTitle === false && (currentTitle !== \"\")) {\r\n      let appointmentObject = {\r\n        title: currentTitle,\r\n        date: currentDate,\r\n        time: currentTime,\r\n        contact: currentContact\r\n      }\r\n      //  console.log('console.log in appointmentspage handleSubmit', appointmentObject)\r\n  \r\n      // if ((dupliacateName === false) && (currentName !== \"\")) {\r\n  \r\n        setAppointments([...appointments, appointmentObject])\r\n        // setContacts([...contacts, {name: currentName, phone: currentPhone, email: currentEmail}])\r\n  \r\n        setCurrentTitle('')\r\n        setCurrentDate('')\r\n        setCurrentTime('')\r\n    }\r\n\r\n\r\n    \r\n    // if the duplicate state variable is false, \r\n    // call the callback function for adding a new contact \r\n    // (passed via props) using the data from the form.\r\n    e.preventDefault();\r\n    \r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Appointment</h2>\r\n          <AppointmentForm \r\n            curreentTitle={currentTitle}\r\n            setCurrentTitle={setCurrentTitle}\r\n            contact={contact}\r\n            setContact={setContact}\r\n            setCurrentContact={setCurrentContact}\r\n            date={date}\r\n            setDate={setDate}\r\n            setCurrentDate={setCurrentDate}\r\n            time={time}\r\n            setTime={setTime}\r\n            setCurrentTime={setCurrentTime}\r\n            contacts={contacts}\r\n            appointments={appointments}\r\n            setAppointments={setAppointments}\r\n            addAppointment={addAppointment}\r\n            createAppointment={createAppointment}\r\n          />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Appointments</h2>\r\n          <TileList \r\n            appointments={appointments}\r\n            addAppointment={addAppointment}\r\n          />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nconst ContactForm = ({\r\n  name,\r\n  setCurrentName,\r\n  currentName,\r\n  phone,\r\n  setCurrentPhone,\r\n  currentPhone,\r\n  email,\r\n  setCurrentEmail,\r\n  currentEmail,\r\n  handleSubmit\r\n}) => {\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <input type=\"text\" value={currentName} placeholder=\"name\" onChange={(e) => {setCurrentName(e.target.value)}}/>\r\n        <input type=\"tel\" value={currentPhone} placeholder='phone' onChange={(e) => {setCurrentPhone(e.target.value)}}/>\r\n        <input type=\"email\" value={currentEmail} placeholder='email' onChange={(e) => {setCurrentEmail(e.target.value)}}/>\r\n        <input type=\"submit\"/>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactForm\r\n","import React, { useEffect, useState } from \"react\";\r\nimport ContactForm from \"../../components/contactForm/ContactForm\";\r\nimport TileList from '../../components/tileList/TileList';\r\n\r\nexport const ContactsPage = (props) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n useEffect(() => {\r\n   for (let i = 0; i < props.contacts.length; i++) {\r\n     if (props.contacts[i].name === props.currentName) {\r\n       props.setDuplicateName(true)\r\n     }else props.setDuplicateName(false)\r\n   }\r\n })\r\n\r\n  return (\r\n    <div>\r\n      <section className='add-contact-section'>\r\n        <h2>Add Contact</h2> \r\n        <ContactForm \r\n          name={props.currentName} \r\n          phone={props.currentPhone} \r\n          email={props.currentEmail}\r\n          currentName={props.currentName}\r\n          setCurrentName={props.setCurrentName} \r\n          setCurrentPhone={props.setCurrentPhone} \r\n          currentPhone={props.currentPhone}\r\n          setCurrentEmail={props.setCurrentEmail} \r\n          currrentEmail={props.currentEmail}\r\n          handleSubmit={props.handleSubmit}/>\r\n      </section>\r\n      <hr />\r\n      <section className='contacts'>\r\n        <h2>Contacts</h2>\r\n        {/* In the Contacts section, render a TileList with the contact array passed via props */}\r\n        <TileList contacts={props.contacts}/>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Switch, Route, Redirect, NavLink } from \"react-router-dom\";\r\nimport { AppointmentsPage } from \"./containers/appointmentsPage/AppointmentsPage\";\r\nimport { ContactsPage } from \"./containers/contactsPage/ContactsPage\";\r\n\r\nfunction App() {\r\n  // contacts state variables and setters\r\n  const [contacts, setContacts] = useState([])\r\n  const [currentContact, setCurrentContact] = useState('')\r\n\r\n  const [currentName, setCurrentName] = useState(\"\")\r\n  const [currentPhone, setCurrentPhone] = useState(\"\")\r\n  const [currentEmail, setCurrentEmail] = useState(\"\")\r\n  const [dupliacateName, setDuplicateName] = useState(false)\r\n  const [duplicateTitle, setDuplicateTitle] = useState(false)\r\n\r\n\r\n  // appointments state variables and setters\r\n  const [appointments, setAppointments] = useState([])\r\n  console.log('appointments', appointments)\r\n  const [title, setTitle] = useState(\"\")\r\n  const [currentTitle, setCurrentTitle] = useState(null)\r\n\r\n  const [date, setDate] = useState(\"\")\r\n  const [currentDate, setCurrentDate] = useState(null)\r\n  const [time, setTime] = useState(\"\")\r\n  const [currentTime, setCurrentTime] = useState(null)\r\n\r\n  const ROUTES = {\r\n    CONTACTS: \"/contacts\",\r\n    APPOINTMENTS: \"/appointments\",\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    if ((dupliacateName === false) && (currentName !== \"\")) {\r\n      let contactObject = {\r\n        name: currentName,\r\n        phone: currentPhone,\r\n        email: currentEmail\r\n      }\r\n      setContacts([...contacts, contactObject])\r\n      setCurrentName('')\r\n      setCurrentPhone('')\r\n      setCurrentEmail('')\r\n    }\r\n    e.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <nav>\r\n        <NavLink to={ROUTES.CONTACTS} activeClassName=\"active\">\r\n          Contacts\r\n        </NavLink>\r\n        <NavLink to={ROUTES.APPOINTMENTS} activeClassName=\"active\">\r\n          Appointments\r\n        </NavLink>\r\n      </nav>\r\n      <main>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Redirect to={ROUTES.CONTACTS} />\r\n          </Route>\r\n          <Route path={ROUTES.CONTACTS}>\r\n            <ContactsPage\r\n              contacts={contacts}\r\n              setContacts={setContacts}\r\n              handleSubmit={handleSubmit}\r\n              currentName={currentName}\r\n              setCurrentName={setCurrentName}\r\n              currentPhone={currentPhone}\r\n              setCurrentPhone={setCurrentPhone}\r\n              currentEmail={currentEmail}\r\n              setCurrentEmail={setCurrentEmail}\r\n              setDuplicateName={setDuplicateName}\r\n              duplicateName={dupliacateName}\r\n            />\r\n          </Route>\r\n          <Route path={ROUTES.APPOINTMENTS}>\r\n            <AppointmentsPage\r\n              appointments={appointments}\r\n              setAppointments={setAppointments}\r\n              contacts={contacts}\r\n              currentContact={currentContact}\r\n              setCurrentContact={setCurrentContact}\r\n              currentTitle={currentTitle}\r\n              setCurrentTitle={setCurrentTitle}\r\n              title={title}\r\n              setTitle={setTitle}\r\n              date={date}\r\n              setDate={setDate}\r\n              currentDate={currentDate}\r\n              setCurrentDate={setCurrentDate}\r\n              time={time}\r\n              setTime={setTime}\r\n              currentTime={currentTime}\r\n              setCurrentTime={setCurrentTime}\r\n              duplicateTitle={duplicateTitle}\r\n              setDuplicateTitle={setDuplicateTitle}\r\n            />\r\n          </Route>\r\n        </Switch>\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}